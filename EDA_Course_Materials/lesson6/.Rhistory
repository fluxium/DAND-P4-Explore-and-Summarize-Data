data = subset(pf, !is.na(gender))) + geom_histogram(stat="identity")
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_boxplot() +
stat_summary(fun.y = mean, geom = 'point', shape = 4)
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(gender))) +
geom_line(aes(color = gender), stat = "summary", fun.y = median)
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarize(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
ggplot(aes(x = age, y = median_friend_count),
data = pf.fc_by_age_gender) +
geom_line(color = gender)
View(pf)
View(diamonds_mp_by_clarity)
View(pf.fc_by_age_gender.long)
View(pf.fc_by_age_gender)
pf.fc_by_age_gender[gender]
pf.fc_by_age_gender
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarize(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
ggplot(aes(x = age, y = median_friend_count),
data = pf.fc_by_age_gender) +
geom_line(color = pf.fc_by_age_gender$gender)
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarize(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
ggplot(aes(x = age, y = median_friend_count),
data = pf.fc_by_age_gender) +
geom_line(aes(color = gender))
install.packages('reshape2')
library(reshape2)
pf.fc_by_age_gender.wide = dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = 'median_friend_count')
pf.fc_by_age_gender.long = melt(pf.fc_by_age_gender.wide, id.vars = c("age"),
variable.name = 'gender',
value.name = 'median_friend_count')
ggplot(aes(y = female / male, x = age), data =  pf.fc_by_age_gender.wide) +
geom_line() +
geom_hline(yintercept = 1, linetype = 2, alpha = 0.3)
pf$year_joined <- floor(2014 - (pf$tenure / 365))
head(pf)
pf$year_joined.bucket <- cut(pf$year_joined, c(2004,2009, 2011, 2012,2014))
table(pf$year_joined.bucket)
ggplot(aes(x = age,  y = friend_count), data = subset(pf, !is.na(gender))) +
geom_line(aes(color = gender), stat = 'summary', fun.y = median)
ggplot(aes(x = age,  y = friend_count), data = subset(pf, !is.na(gender))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(aes(x = age,  y = friend_count),
data = subset(pf, !is.na(gender)| !is.na(year_joined.bucket))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = mean, linetype = 2)
pf$mfr <- pf$friend_count / ifelse(pf$tenure < 1, 1, pf$tenure)
# Instructor code is better :D
with(subset(pf, tenure >= 1), summary(friend_count / tenure))
pf$friendships_initiated_ratio <- pf$friendships_initiated / pf$tenure
ggplot(aes(y = friendships_initiated_ratio,  x = tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket))
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
install.packages("reshape2")
#install.packages('reshape2')
library(reshape2)
pf.fc_by_age_gender.wide = dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = 'median_friend_count')
pf.fc_by_age_gender.long = melt(pf.fc_by_age_gender.wide, id.vars = c("age"),
variable.name = 'gender',
value.name = 'median_friend_count')
ggplot(aes(y = female / male, x = age), data =  pf.fc_by_age_gender.wide) +
geom_line() +
geom_hline(yintercept = 1, linetype = 2, alpha = 0.3)
# setwd for Home workstation
setwd("C:/Users/Mahlon/Source/Repos/DAND-P4-Explore-and-Summarize-Data/EDA_Course_Materials/lesson5")
# setwd for Work workstation
#setwd("C:/Source (Remote)/Repos/DAND-P4-Explore-and-Summarize-Data/EDA_Course_Materials/lesson5")
load('.rdata')
library(ggplot2)
library(tidyr)
library(dplyr)
library(xlsx)
library(lubridate)
library(gridExtra)
library(GGally)
library(reshape2)
pf <- read.delim("../datasets/pseudo_facebook.tsv")
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_histogram(stat="identity")
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_boxplot() +
stat_summary(fun.y = mean, geom = 'point', shape = 4)
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(gender))) +
geom_line(aes(color = gender), stat = "summary", fun.y = median)
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarize(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
ggplot(aes(x = age, y = median_friend_count),
data = pf.fc_by_age_gender) +
geom_line(aes(color = gender))
#install.packages('reshape2')
library(reshape2)
pf.fc_by_age_gender.wide = dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = 'median_friend_count')
pf.fc_by_age_gender.long = melt(pf.fc_by_age_gender.wide, id.vars = c("age"),
variable.name = 'gender',
value.name = 'median_friend_count')
ggplot(aes(y = female / male, x = age), data =  pf.fc_by_age_gender.wide) +
geom_line() +
geom_hline(yintercept = 1, linetype = 2, alpha = 0.3)
pf$year_joined <- floor(2014 - (pf$tenure / 365))
head(pf)
pf$year_joined.bucket <- cut(pf$year_joined, c(2004,2009, 2011, 2012,2014))
table(pf$year_joined.bucket)
ggplot(aes(x = age,  y = friend_count), data = subset(pf, !is.na(gender))) +
geom_line(aes(color = gender), stat = 'summary', fun.y = median)
ggplot(aes(x = age,  y = friend_count), data = subset(pf, !is.na(gender))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(aes(x = age,  y = friend_count),
data = subset(pf, !is.na(gender)| !is.na(year_joined.bucket))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = mean, linetype = 2)
pf$mfr <- pf$friend_count / ifelse(pf$tenure < 1, 1, pf$tenure)
# Instructor code is better :D
with(subset(pf, tenure >= 1), summary(friend_count / tenure))
pf$friendships_initiated_ratio <- pf$friendships_initiated / pf$tenure
ggplot(aes(y = friendships_initiated_ratio,  x = tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket))
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = 30 * round(tenure / 30), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = 90 * round(tenure / 90), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_smooth(aes(color = year_joined.bucket))
yo <- read.csv("../datasets/yogurt.csv")
yo$id <- factor(yo$id)
str(yo)
summary(yo)
table(yo$strawberry)
summary(yo$price)
qplot(x = price, data = yo, binwidth = 1) # Price is ver descrete
length(unique(yo$price))
table(yo$price)
yo <- transform(yo, all.purchases = strawberry + blueberry + pina.colada
+ plain + mixed.berry)
ggplot(aes(x = time, y = price), data = yo) +
geom_point(alpha = 1/30)
set.seed(4230)
sample.ids <- sample(levels(yo$id), 16)
ggplot(aes(x = time, y = price),
data = subset(yo, id %in% sample.ids)) +
facet_wrap(~ id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
set.seed(43736345) #6345, 5263, 4373, 1914, 1970
sample.ids <- sample(levels(yo$id), 16)
ggplot(aes(x = time, y = price),
data = subset(yo, id %in% sample.ids)) +
facet_wrap(~ id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
set.seed(1836)
pf_subset <- pf[, c(2:15)]
names(pf_subset)
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000), ], axisLabels = 'internal')
nci <- read.table("../datasets/nci.tsv")
colnames(nci) <- c(1:64)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
names(nci.long.samp) <- c("gene", "case", "value")
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
install.packages(C("scales", "memisc", "RColorBrewer"))
install.packages(c("scales", "memisc", "RColorBrewer"))
install.packages(c("scales", "memisc", "RColorBrewer"))
install.packages(c("scales", "memisc", "RColorBrewer"))
install.packages(c("scales", "memisc", "RColorBrewer"))
install.packages(c("scales", "memisc", "RColorBrewer"))
install.packages(c("scales", "memisc", "RColorBrewer"))
# setwd for Home workstation
setwd("C:/Users/Mahlon/Source/Repos/DAND-P4-Explore-and-Summarize-Data/EDA_Course_Materials/lesson6")
# setwd for Work workstation
#setwd("C:/Source (Remote)/Repos/DAND-P4-Explore-and-Summarize-Data/EDA_Course_Materials/lesson6")
#load('.rdata')
library(ggplot2)
library(plyr)
library(tidyr)
library(dplyr)
library(xlsx)
library(lubridate)
library(gridExtra)
library(GGally)
library(reshape2)
library(scales)
install.packages("scales")
install.packages("scales")
# setwd for Home workstation
setwd("C:/Users/Mahlon/Source/Repos/DAND-P4-Explore-and-Summarize-Data/EDA_Course_Materials/lesson6")
# setwd for Work workstation
#setwd("C:/Source (Remote)/Repos/DAND-P4-Explore-and-Summarize-Data/EDA_Course_Materials/lesson6")
#load('.rdata')
library(ggplot2)
library(plyr)
library(tidyr)
library(dplyr)
library(xlsx)
library(lubridate)
library(gridExtra)
library(GGally)
library(reshape2)
library(scales)
library(memisc)
library(RColorBrewer)
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point() +
scale_x_continuous(limits = c(0, quantile(diamonds$carat, .99))) +
scale_y_continuous(limits = c(0, quantile(diamonds$price, .99)))
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.'))) # This code is using deprecated syntax
install.packages("GGally")
plot1 <- qplot(x = price, data = diamonds) +
ggtitle('Price')
library(ggplot2)
plot1 <- qplot(x = price, data = diamonds) +
ggtitle('Price')
plot2 <- qplot(x = log10(price), data = diamonds) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
# install these if necessary
#install.packages('GGally')
#install.packages('scales')
#install.packages('memisc')
#install.packages('lattice')
#install.packages('MASS')
#install.packages('car')
#install.packages('reshape')
#install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(gridExtra)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.'))) # This code is using deprecated syntax
plot1 <- qplot(x = price, data = diamonds) +
ggtitle('Price')
plot2 <- qplot(x = log10(price), data = diamonds) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$price), decreasing = T))
head(sort(table(diamonds$carat), decreasing = T)) # Crowded, will need to account for over plotting
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 0.5, size = 0.75, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# install and load the RColorBrewer package
install.packages('RColorBrewer')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter' ) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2)), palette = 'BrBG') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
install.packages("RColorBrewer")
# install and load the RColorBrewer package
#install.packages('RColorBrewer')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter' ) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2)), palette = 'BrBG') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
# setwd for Home workstation
setwd("C:/Users/Mahlon/Source/Repos/DAND-P4-Explore-and-Summarize-Data/EDA_Course_Materials/lesson6")
# setwd for Work workstation
#setwd("C:/Source (Remote)/Repos/DAND-P4-Explore-and-Summarize-Data/EDA_Course_Materials/lesson6")
#load('.rdata')
library(ggplot2)
library(plyr)
library(tidyr)
library(dplyr)
library(xlsx)
library(lubridate)
library(gridExtra)
library(GGally)
library(reshape2)
library(scales)
library(memisc)
library(RColorBrewer)
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point() +
scale_x_continuous(limits = c(0, quantile(diamonds$carat, .99))) +
scale_y_continuous(limits = c(0, quantile(diamonds$price, .99)))
# install these if necessary
#install.packages('GGally')
#install.packages('scales')
#install.packages('memisc')
#install.packages('lattice')
#install.packages('MASS')
#install.packages('car')
#install.packages('reshape')
#install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(gridExtra)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.'))) # This code is using deprecated syntax
help("wrap", package = "GGally")
# install these if necessary
#install.packages('GGally')
#install.packages('scales')
#install.packages('memisc')
#install.packages('lattice')
#install.packages('MASS')
#install.packages('car')
#install.packages('reshape')
#install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(gridExtra)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
#, params = c(shape = I('.'), outlier.shape = I('.'))
ggpairs(diamond_samp) # This code is using deprecated syntax
plot1 <- qplot(x = price, data = diamonds) +
ggtitle('Price')
plot2 <- qplot(x = log10(price), data = diamonds) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$price), decreasing = T))
head(sort(table(diamonds$carat), decreasing = T)) # Crowded, will need to account for over plotting
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 0.5, size = 0.75, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# install and load the RColorBrewer package
#install.packages('RColorBrewer')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter' ) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2)), palette = 'BrBG') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color",
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
install.package('bitops')
install.packages(c('bitops', 'RCurl'))
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
install.packages(c('bitops', 'RCurl'))
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
source(rawConnection(diamondsurl))
diamondsBig <- read.csv("../datasets/diamondsbig.csv")
install.packages(c("bitops", "RCurl"))
diamondsBig$logprice <- log(diamondsBig$price)
diamondsBigSample <- # Find code to create nrows() sample
m1 <- lm(logprice ~ I(carat^(1/3)), data = diamondsBigSample[diamondsBigSample$price < 10000 &
diamondsBigSample$cert == 'GIA',])
diamondsBig <- read.csv("../datasets/diamondsbig.csv")
diamondsBig$logprice <- log(diamondsBig$price)
diamondsBigSample <- diamondsBig # Find code to create nrows() sample
m1 <- lm(logprice ~ I(carat^(1/3)), data = diamondsBigSample[diamondsBigSample$price < 10000 &
diamondsBigSample$cert == 'GIA',])
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
#Be sure youâve loaded the library memisc and have m5 saved as an object in your workspace.
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
