getwd()
s
setwd(C:\Users\Mahlon\Source\Repos\DAND-P4-Explore-and-Summarize-Data\EDA_Course_Materials\lesson3)
setwd("C:\Users\Mahlon\Source\Repos\DAND-P4-Explore-and-Summarize-Data\EDA_Course_Materials\lesson3")
setwd("C:/Users/Mahlon/Source/Repos/DAND-P4-Explore-and-Summarize-Data/EDA_Course_Materials/lesson3")
```{r Pseudo-Facebook User Data}
# Make sure you are in the correct directory
# getwd()
# files.names()
fbdf <- read.csv("pseudo_facebook.tsv", sep = "\t")
names(fbdf)
```
***
### Histogram of Users' Birthdays
Notes:
ggplot is simpler and more intuitive to use than the native R graphics package. It provides some intelligent features liks legend generation and labeling
```{r Histogram of Users\' Birthdays}
install.packages('ggplot2')
library(ggplot2)
install.packages('ggthemes', dependencies = TRUE)
library(ggthemes)
theme_set(theme_minimal(18))
qplot(x = dob_day, data = fbdf) +
scale_x_continuous(breaks=1:31)
ggplot(aes(x = dob_day), data = fbdf) +
geom_bar() +
scale_x_continuous(breaks = 1:31)
```
***
#### What are some things that you notice about this histogram?
Response:
Large bin on the first day
***
### Moira's Investigation
Notes:
Wanted to study how people perceive their audience versus who is actually seeing the content they are producing on FB. Many people over estimate their audience. Did a survey where a user was directed to a recent post and was asked how many freinds saw it.
***
### Estimating Your Audience Size
Notes:
Post about person whistling in the kitchen by my office, guess about 10 people saw it, 7% of my friends
***
#### Think about a time when you posted a specific message or shared a photo on Facebook. What was it?
Response:
Post about person whistling in the kitchen by my office
#### How many of your friends do you think saw that post?
Response:
10
#### Think about what percent of your friends on Facebook see any posts or comments that you make in a month. What percent do you think that is?
Response:
7%
***
### Perceived Audience Size
Notes:
Many people think their audience is about 25% of their friends
***
### Faceting
Notes:
```{r Faceting}
qplot(x = dob_day, data = fbdf) +
scale_x_continuous(breaks = 1:31) +
facet_wrap(~dob_day, ncol = 3)
ggplot(data = fbdf, aes(x = dob_day)) +
geom_histogram() +
scale_x_continuous(breaks = 1:31) +
facet_wrap(~dob_month)
```
#### Letâs take another look at our plot. What stands out to you here?
Response:
Jan 1
***
### Be Skeptical - Outliers and Anomalies
Notes:
***
### Moira's Outlier
Notes:
#### Which case do you think applies to Moiraâs outlier?
Response:
Bad data about an extreme case
***
### Friend Count
Notes:
#### What code would you enter to create a histogram of friend counts?
```{r Friend Count}
names(fbdf)
qplot(x = friend_count, data = fbdf)
```
#### How is this plot similar to Moira's first plot?
Response:
The histogram is positivly skewed with small bins at very high values creating a long tail
***
### Limiting the Axes
Notes:
```{r Limiting the Axes}
qplot(x = friend_count, data = fbdf, xlim = c(0,1000))
qplot(x = friend_count, data = fbdf) +
scale_x_continuous(limits = c(0,1000))
```
### Exploring with Bin Width
Notes:
Moira set her binwidth to 1 because most people reponded with whole numbers
like 10, 50
***
### Adjusting the Bin Width
Notes:
### Faceting Friend Count
```{r Faceting Friend Count}
# What code would you add to create a facet the histogram by gender?
# Add it to the code below.
qplot(x = friend_count, data = fbdf, binwidth = 25) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
```
***
### Omitting NA Values
Notes:
```{r Omitting NA Values}
qplot(x = friend_count, data = subset(fbdf, !is.na(gender)),
binwidth = 25) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
```
***
### Statistics 'by' Gender
Notes:
```{r Statistics \'by\' Gender}
table(fbdf$gender)
by(fbdf$friend_count, fbdf$gender, summary)
```
#### Who on average has more friends: men or women?
Response:
Women
#### What's the difference between the median friend count for women and men?
Response:
22
#### Why would the median be a better measure than the mean?
Response:
Median is more robust. Men have more observations so using the most common value as a comparison makes more sense. Because the data is long tailed the mean will tend to become skewed. Median marks that halfway point in all our data points as long as we trust half our values we can report a reliable location of the of the center of our distribution
***
### Tenure
Notes:
```{r Tenure}
# I() tells R to use the values as is without interpretation
# Not working
qplot(x = tenure, data = fbdf, color = I('black'), fill('#099DD9'))
ggplot(aes(x = tenure), data = fbdf) +
geom_histogram(binwidth = 30, color = 'black', fill = '#099DD9')
```
***
#### How would you create a histogram of tenure by year?
```{r Tenure Histogram by Year}
ggplot(aes(x = tenure/365), data = fbdf) +
geom_histogram(binwidth = 0.25,color = 'black', fill = '#099DD9') +
scale_x_continuous(breaks = 1:7)
```
***
### Labeling Plots
Notes:
```{r Labeling Plots}
# seq can just be 1:7
ggplot(aes(x = tenure / 365), data = fbdf) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(1, 7, 1), limits = c(0, 7)) +
xlab('Number of years using Facebook') +
ylab('Number of users in sample')
```
***
### User Ages
Notes:
```{r User Ages}
names(fbdf)
ggplot(aes(x = age), data = fbdf) +
geom_histogram(binwidth = 1, color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(1, 130, 5)) +
xlab('Age') +
ylab('Number of users in sample')
```
#### What do you notice?
Response:
There are far more centenarians than expected. Could be because of the age being calculated from a default birth date value
***
### The Spread of Memes
Notes:
Information flowing through a network. Memes have a cyclical repition. The sent to experience regular resurgence.
***
### Lada's Money Bag Meme
Notes:
Five Fridays, Saturdays, Sundays
Initial graph with normal y scaling indicated that interest in this meme went to zero then experience regular intense spikes. When Y was scaled log it could be seen that interest in this meme was not zero but some low value like 10
***
### Transforming Data
Notes:
Sometimes to get a deeper understanding of the variable it helps to view it with different scales like log10 or sqrt
***
### Add a Scaling Layer
Notes:
```{r Add a Scaling Layer}
install.packages("gridExtra", dependencies = T)
library(gridExtra)
p1 = qplot(x = friend_count, data = fbdf)
p2 = qplot(x = friend_count + 1, data = fbdf) + scale_x_log10()
p3 = qplot(x = friend_count, data = fbdf) + scale_x_sqrt()
grid.arrange(p1, p2, p3, ncol=1)
p1 = qplot(x = friend_count, data = fbdf)
p2 = qplot(x = log10(friend_count + 1), data = fbdf)
p3 = qplot(x = sqrt(friend_count), data = fbdf)
grid.arrange(p1, p2, p3, ncol=1)
p1 = ggplot(aes(x = friend_count), data = fbdf) + geom_histogram()
p2 = p1 + scale_x_log10()
p3 = p1 + scale_x_sqrt()
grid.arrange(p1, p2, p3, ncol=1)
```
qplot(x = friend_count, data = subset(fbdf, !is.na(gender)),
binwidth = 25, ggeom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50))
qplot(x = friend_count, data = subset(fbdf, !is.na(gender)),
binwidth = 25, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50))
qplot(x = friend_count, data = subset(fbdf, !is.na(gender)),
binwidth = 25, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 100))
```{r Frequency Polygons}
qplot(x = friend_count, data = subset(fbdf, !is.na(gender)),
binwidth = 25, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(350, 650),
breaks = seq(0, 1000, 100))
```
qplot(x = friend_count, data = subset(fbdf, !is.na(gender)),
binwidth = 25, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(650, 1000),
breaks = seq(0, 1000, 100))
qplot(x = friend_count, data = subset(fbdf, !is.na(gender)),
binwidth = 25, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 400),
breaks = seq(0, 1000, 100))
qplot(x = www_likes, data = subset(fbdf, !is.na(gender)),
binwidth = 25, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 100),
breaks = seq(0, 1000, 50))
qplot(x = www_likes, data = subset(fbdf, !is.na(gender)),
binwidth = 5, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 100, 5))
qplot(x = www_likes, data = subset(fbdf, !is.na(gender)),
binwidth = 5, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 100),
breaks = seq(0, 100, 5))
qplot(x = www_likes, data = subset(fbdf, !is.na(gender)),
binwidth = 5, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 50),
breaks = seq(0, 100, 5))
```{r Likes on the Web}
qplot(x = www_likes, data = subset(fbdf, !is.na(gender)),
binwidth = 5, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 50),
breaks = seq(0, 100, 5)) +
scale_x_log10()
qplot(x = www_likes, data = subset(fbdf, !is.na(gender)),
binwidth = 5, geom = 'freqpoly', color = gender) +
scale_x_continuous() +
scale_x_log10()
qplot(x = www_likes, data = subset(fbdf, !is.na(gender)),
geom = 'freqpoly', color = gender) +
scale_x_continuous() +
scale_x_log10()
by(fbdf$www_likes, fbdf$gender, sum)
qplot(x = gender, y = friend_count, data = subset(fbdf, !is.na(gender)),
geom = 'boxplot') +
scale_y_continuous(limits = c(0, 1000))
qplot(x = gender, y = friend_count, data = subset(fbdf, !is.na(gender)),
geom = 'boxplot' ylim = c(0, 1000))
#scale_y_continuous(limits = c(0, 1000))
qplot(x = gender, y = friend_count, data = subset(fbdf, !is.na(gender)),
geom = 'boxplot', ylim = c(0, 1000))
qplot(x = gender, y = friend_count, data = subset(fbdf, !is.na(gender)),
geom = 'boxplot', ylim = c(0, 1000)) +
coord_cartesian(ylim = c(0, 1000))
qplot(x = gender, y = friend_count, data = subset(fbdf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 1000))
qplot(x = gender, y = friend_count, data = subset(fbdf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 250))
```
by(fbdf$friend_count, fbdf$gender, summary)
qplot(x = gender, y = friendships_initiated, data = subset(fbdf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 250))
# If we had used ylim parameter of qplot or scale_y_continuous this table would not match the box plot above
by(fbdf$friendships_initiated, fbdf$gender, summary)
qplot(x = friendships_initiated, data = subset(fbdf, !is.na(gender)),
geom = 'freqpoly', color = gender) +
scale_x_continuous()
qplot(x = friendships_initiated, data = subset(fbdf, !is.na(gender)),
geom = 'freqpoly', color = gender) +
scale_x_continuous() +
scale_x_log10()
fbdf$mobile_check_in <- NA
fbdf$mobile_check_in <- ifelse(fbdf$mobile_likes > 0, 1, 0)
fbdf$mobile_check_in <- factor(fbdf$mobile_check_in)
percent_use_check_in <- table(fbdf$mobile_check_in)["TRUE"]
percent_use_check_in
fbdf$mobile_check_in
percent_use_check_in <- sum(fbdf$mobile_check_in)
percent_use_check_in <- length(fbdf$mobile_check_in["TRUE"]) / length(fbdf$mobile_check_in)
percent_use_check_in
length(fbdf$mobile_check_in["TRUE"])
length(fbdf[fbdf$mobile_check_in == TRUE])
length(fbdf[fbdf$mobile_check_in == 1])
length(fbdf[mobile_check_in == 1])
length(fbdf[mobile_check_in == "TRUE"])
length(fbdf[fbdf$mobile_check_in == "TRUE"])
length(fbdf[fbdf$mobile_check_in == "1"])
fbdf$mobile_check_in <- vector(fbdf$mobile_check_in)
fbdf$mobile_check_in <- vector(fbdf$mobile_check_in, mode = logical)
fbdf$mobile_check_in <- ifelse(fbdf$mobile_likes > 0, 1, 0)
sum(fbdf$mobile_check_in)
length(fbdf$mobile_check_in)
percent_use_check_in <- sum(fbdf$mobile_check_in) / length(fbdf$mobile_check_in)
percent_use_check_in
percent_use_check_in <- (sum(fbdf$mobile_check_in) / length(fbdf$mobile_check_in)) * 100
percent_use_check_in
fbdf$mobile_check_in <- factor(fbdf$mobile_check_in)
percent_use_check_in <- (sum(fbdf$mobile_check_in == 1) / length(fbdf$mobile_check_in)) * 100
percent_use_check_in
diamonds <- data(diamonds)
summary(diamonds)
diamonds <- data("diamonds")
data(diamonds)
summary(diamonds)
str(diamonds)
dir(diamonds$color)
levels(diamonds$color)
?diamonds
qplot(x = price, data = diamonds)
summary(diamonds)
summary(diamonds$price)
dim(diamonds$color)
dim(diamonds)
lt500 <- length(diamonds$price < 500)
lt500
lt250 <- length(diamonds$price < 250)
lt250
lt250 <- length(diamonds[diamonds$price < 250])
lt250
lt500 <- length(diamonds[diamonds$price < 500])
lt500
lt500 <- length(diamonds[price < 500])
lt500
lt500 <- diamonds[price < 500]
lt500
lt500 <- diamonds$price < 500
lt500
lt500 <- diamonds$price < 500
length(lt500 == TRUE)
lt500 <- diamonds$price < 500
length(lt500 == "TRUE")
sum(lt500 == "TRUE")
lt250 <- diamonds$price < 250
sum(lt250 == TRUE)
lt250 <- diamonds$price < 250
sum(lt250 == "TRUE")
sum(gte15000 == TRUE)
gte15000 <- diamonds$price >= 15000
sum(gte15000 == TRUE)
gte15000 <- diamonds$price >= 15000
sum(gte15000 == "TRUE")
qplot(x = price, data = diamonds, xlim = c(0, 3000))
qplot(x = price, data = diamonds, xlim = c(0, 3000), binwidth = 10)
ggsave('diamond_price_0_to_3000_bw_10.png')
qplot(x = price, data = diamonds, xlim = c(0, 3000), binwidth = 10) +
scale_x_continuous()
qplot(x = price, data = diamonds, binwidth = 10) +
scale_x_continuous(limits = c(0, 3000))
qplot(x = price, data = diamonds, binwidth = 10) +
scale_x_continuous(limits = c(1000, 2000))
ggsave('diamond_price_1000_to_2000_bw_10_void_1500.png')
cheapdiamonds <- diamonds[diamonds$price < 1500]
cheapdiamonds <- subset(diamonds, price < 1500)
summary(cheapdiamonds)
summary(cheapdiamonds$price)
qplot(x = price, data = cheapdiamonds, binwidth = 1) +
scale_x_continuous(limits = c(0, 2000))
mode(cheaperdiamonds$price)
mode(cheapdiamonds$price)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(cheapdiamonds$price)
qplot(x = price, data = diamonds, binwidth = 1) +
scale_x_log10()
qplot(x = price, data = diamonds, binwidth = 10) +
scale_x_log10()
qplot(x = price, data = diamonds, binwidth = 0.1) +
scale_x_log10()
qplot(x = price, data = diamonds, binwidth = 1) +
scale_x_continuous()+
facet_wrap(~cut)
qplot(x = price, data = diamonds, binwidth = 10) +
scale_x_continuous() +
facet_wrap(~cut)
ggsave('diamond_price_by_cut.png')
qplot(x = cut, y = price, data = diamonds, geom = 'boxplot')
qplot(x = cut, y = price, data = diamonds, geom = 'boxplot') +
coord_cartesian(ylim = c(16000, 19000))
qplot(x = cut, y = price, data = diamonds, geom = 'boxplot') +
coord_cartesian(ylim = c(18000, 19000))
qplot(x = cut, y = price, data = diamonds, geom = 'boxplot') +
coord_cartesian(ylim = c(0, 600))
qplot(x = cut, y = price, data = diamonds, geom = 'boxplot') +
coord_cartesian(ylim = c(0, 600), breaks = seq(0,600, 10))
qplot(x = cut, y = price, data = diamonds, geom = 'boxplot') +
coord_cartesian(ylim = c(250, 400))
qplot(x = cut, y = price, data = diamonds, geom = 'boxplot') +
coord_cartesian()
qplot(x = price, data = diamonds) + facet_wrap(~cut)
summary(diamonds$cut)
source('C:/Users/Mahlon/Source/Repos/DAND-P4-Explore-and-Summarize-Data/EDA_Course_Materials/lesson3/lesson3_problemset.R', echo=TRUE)
summary(diamonds$cut$price)
summary(diamonds$cut$price)
source('C:/Users/Mahlon/Source/Repos/DAND-P4-Explore-and-Summarize-Data/EDA_Course_Materials/lesson3/lesson3_problemset.R', echo=TRUE)
summary(diamonds$cut, diamonds$price)
with(diamonds, tapply(cut, price, sum))
by(diamonds$price, diamonds$cut, summary)
?facet_wrap
qplot(x = price, data = diamonds) + facet_wrap(~cut, scales = "free_y")
qplot(x = price/carat, data = diamonds) +
facet_wrap(~cut, scales = "free_y") +
scale_x_log10()
qplot(x = clarity, y = price, data = diamonds, geom = 'boxplot') +
coord_cartesian()
qplot(x = color, y = price, data = diamonds, geom = 'boxplot') +
coord_cartesian()
by(diamonds$price, diamonds$clarity, summary)
by(diamonds$price, diamonds$color, summary)
qplot(x = clarity, y = price, data = diamonds, geom = 'boxplot') +
coord_cartesian() +
scale_y_log10()
qplot(x = color, y = price, data = diamonds, geom = 'boxplot') +
coord_cartesian() +
scale_y_log10()
qplot(x = clarity, y = price, data = diamonds, geom = 'boxplot') +
coord_cartesian()
qplot(x = clarity, y = price, data = diamonds, geom = 'boxplot') +
coord_cartesian() +
scale_y_log10()
by(diamonds$price, diamonds$clarity, summary)
qplot(x = color, y = price, data = diamonds, geom = 'boxplot') +
coord_cartesian()
qplot(x = color, y = price, data = diamonds, geom = 'boxplot') +
coord_cartesian() +
scale_y_log10()
by(diamonds$price, diamonds$color, summary)
qplot(x = color, y = price, data = diamonds, geom = 'boxplot') +
coord_cartesian()
