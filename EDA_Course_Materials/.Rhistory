theme_dark()
ggplot(aes(x=price, color=cut), data=diamonds) +
geom_histogram(bins = 30) +
facet_wrap(~color) +
scale_x_log10() +
scale_color_brewer(type = 'qual')
ggplot(aes(x=price, color=cut), data=diamonds) +
geom_histogram(bins = 30) +
facet_wrap(~color) +
scale_x_log10() +
scale_color_brewer(type = 'qual') +
scale_fill_brewer(type = 'qual') +
theme_dark()
ggplot(aes(x=price, color=cut), data=diamonds) +
geom_histogram(bins = 30) +
facet_wrap(~color) +
scale_x_log10() +
#scale_color_brewer(type = 'qual') +
scale_fill_brewer(type = 'qual') +
theme_dark()
ggplot(aes(x=price, fill=cut), data=diamonds) +
geom_histogram(bins = 30) +
facet_wrap(~color) +
scale_x_log10() +
#scale_color_brewer(type = 'qual') +
scale_fill_brewer(type = 'qual') +
theme_dark()
ggplot(aes(x=price, fill=cut), data=diamonds) +
geom_histogram(bins = 30) +
facet_wrap(~color) +
scale_x_log10() +
#scale_color_brewer(type = 'qual') +
scale_fill_brewer(type = 'qual', direction = -1) +
theme_dark()
ggplot(aes(x=price, fill=cut), data=diamonds) +
geom_histogram(bins = 30) +
facet_wrap(~color) +
scale_x_log10() +
scale_fill_brewer(type = 'qual') +
theme_dark()
# Create a histogram of diamond prices.
# Facet the histogram by diamond color
# and use cut to color the histogram bars.
# The plot should look something like this.
# http://i.imgur.com/b5xyrOu.jpg
# Note: In the link, a color palette of type
# 'qual' was used to color the histogram using
# scale_fill_brewer(type = 'qual')
# This assignment is not graded and
# will be marked as correct when you submit.
# ENTER YOUR CODE BELOW THIS LINE
# ===========================================
library(ggplot2)
library(RColorBrewer)
library(dplyr)
diamondsMB <- diamonds
# Releveling the cut ord. factor since the stacking behavior
# changed in ggplot 2.2.1
# https://stackoverflow.com/questions/32345923/how-to-control-ordering-of-stacked-bar-chart-using-identity-on-ggplot2
# http://www.cookbook-r.com/Manipulating_data/Changing_the_order_of_levels_of_a_factor/
diamondsMB$cut <- factor(diamondsMB$cut, levels = rev(levels(diamondsMB$cut)))
ggplot(diamondsMB, aes(x=price, fill=cut)) +
# binwidth took some trial and error haha
geom_histogram(binwidth = 0.0582) +
facet_wrap(~color) +
scale_x_log10() +
scale_y_continuous(breaks = seq(0, 700, 200)) +
scale_fill_brewer(type = 'qual', direction = -1) +
# The qual palette looks pretty good on dark
theme_dark()
# Create a scatterplot of diamond price vs.
# table and color the points by the cut of
# the diamond.
# The plot should look something like this.
# http://i.imgur.com/rQF9jQr.jpg
# Note: In the link, a color palette of type
# 'qual' was used to color the scatterplot using
# scale_color_brewer(type = 'qual')
# This assignment is not graded and
# will be marked as correct when you submit.
# ENTER YOUR CODE BELOW THIS LINE
# ===========================================
library(ggplot2)
library(RColorBrewer)
library(dplyr)
diamondsMB <- diamonds
# Releveling the cut ord. factor since the stacking behavior
# changed in ggplot 2.2.1
# https://stackoverflow.com/questions/32345923/how-to-control-ordering-of-stacked-bar-chart-using-identity-on-ggplot2
# http://www.cookbook-r.com/Manipulating_data/Changing_the_order_of_levels_of_a_factor/
diamondsMB$cut <- factor(diamondsMB$cut, levels = rev(levels(diamondsMB$cut)))
ggplot(diamondsMB, aes(x = table, y = price, color = cut)) +
geom_point() +
scale_x_continuous(breaks = seq(50, 80, 2), limits = c(50, 80)) +
scale_color_brewer(type = 'qual', direction = -1) +
theme_dark()
# Create a scatterplot of diamond price vs.
# volume (x * y * z) and color the points by
# the clarity of diamonds. Use scale on the y-axis
# to take the log10 of price. You should also
# omit the top 1% of diamond volumes from the plot.
# Note: Volume is a very rough approximation of
# a diamond's actual volume.
# The plot should look something like this.
# http://i.imgur.com/excUpea.jpg
# Note: In the link, a color palette of type
# 'div' was used to color the scatterplot using
# scale_color_brewer(type = 'div')
# This assignment is not graded and
# will be marked as correct when you submit.
# ENTER YOUR CODE BELOW THIS LINE
# ===========================================
library(ggplot2)
library(RColorBrewer)
library(dplyr)
diamondsMB <- diamonds
# Releveling the cut ord. factor since the stacking behavior
# changed in ggplot 2.2.1
# https://stackoverflow.com/questions/32345923/how-to-control-ordering-of-stacked-bar-chart-using-identity-on-ggplot2
# http://www.cookbook-r.com/Manipulating_data/Changing_the_order_of_levels_of_a_factor/
diamondsMB$cut <- factor(diamondsMB$cut, levels = rev(levels(diamondsMB$cut)))
diamondsMB$vol <- with(data = diamondsMB, x * y * z)
# Some diamonds have zeros for one of the dimentions, removing
diamondsMB <- subset(diamondsMB, vol > 0)
ggplot(diamondsMB, aes(x = vol, y = price, color = clarity)) +
geom_point() +
scale_y_log10() +
# quantile to remove top 1%
scale_x_continuous(limits = c(0, quantile(diamondsMB$vol, .99)[[1]])) +
scale_color_brewer(type = 'div') +
theme_dark()
# Many interesting variables are derived from two or more others.
# For example, we might wonder how much of a person's network on
# a service like Facebook the user actively initiated. Two users
# with the same degree (or number of friends) might be very
# different if one initiated most of those connections on the
# service, while the other initiated very few. So it could be
# useful to consider this proportion of existing friendships that
# the user initiated. This might be a good predictor of how active
# a user is compared with their peers, or other traits, such as
# personality (i.e., is this person an extrovert?).
# Your task is to create a new variable called 'prop_initiated'
# in the Pseudo-Facebook data set. The variable should contain
# the proportion of friendships that the user initiated.
# This programming assignment WILL BE automatically graded.
# DO NOT DELETE THIS NEXT LINE OF CODE
# ========================================================================
pf <- read.delim('./datasets/pseudo_facebook.tsv')
# ENTER YOUR CODE BELOW THIS LINE
# ========================================================================
pf$prop_initiated <- with(pf, friendships_initiated / ifelse(friend_count == 0, 1, friend_count))
# Create a line graph of the median proportion of
# friendships initiated ('prop_initiated') vs.
# tenure and color the line segment by
# year_joined.bucket.
# Recall, we created year_joined.bucket in Lesson 5
# by first creating year_joined from the variable tenure.
# Then, we used the cut function on year_joined to create
# four bins or cohorts of users.
# (2004, 2009]
# (2009, 2011]
# (2011, 2012]
# (2012, 2014]
# The plot should look something like this.
# http://i.imgur.com/vNjPtDh.jpg
# OR this
# http://i.imgur.com/IBN1ufQ.jpg
# This assignment is not graded and
# will be marked as correct when you submit.
# ENTER YOUR CODE BELOW THIS LINE
# ===========================================================
setwd("C:/Users/Mahlon/Source/Repos/DAND-P4-Explore-and-Summarize-Data/EDA_Course_Materials")
pf <- read.delim('./datasets/pseudo_facebook.tsv')
pf$prop_initiated <- with(pf, friendships_initiated / ifelse(friend_count == 0, 1, friend_count))
ggplot(aes(x = prop_initiated,  y = tenure), data = subset(pf, !is.na(gender))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
pf$year_joined <- floor(2014 - (pf$tenure / 365))
pf$year_joined.bucket <- cut(pf$year_joined, c(2004, 2009, 2011, 2012, 2014))
ggplot(aes(x = prop_initiated,  y = tenure), data = subset(pf, !is.na(gender))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(aes(x = tenure, y = prop_initiated), data = pf) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(aes(x = tenure, y = prop_initiated), data = subset(pf, !is.na(gender))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(aes(x = tenure, y = prop_initiated), data = subset(pf, prop_initiated > 0)) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(aes(x = tenure, y = prop_initiated), data = subset(pf, prop_initiated != 0)) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(aes(x = tenure, y = prop_initiated), data = pf) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
!is.na(gender)
ggplot(aes(x = tenure, y = prop_initiated), data = subset(pf, !is.na(gender))) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(aes(x = tenure, y = prop_initiated), data = pf) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(aes(x = tenure, y = prop_initiated), data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(aes(x = tenure, y = prop_initiated), data = subset(pf, tenure > 0)) +
geom_smooth(aes(color = year_joined.bucket))
mean(subset(pf, year_jointed.bucket = (2012,2014]))
mean(subset(pf, year_jointed.bucket = "(2012,2014]"))
str(pf$year_joined.bucket)
mean(subset(pf, year_jointed.bucket = 1)
)
mean(subset(pf, year_jointed.bucket = 1)[prop_initated])
summary(pf$year_joined.bucket)
mean(pf$prop_initiated[pf$year_joined.bucket = 1])
pf$prop_initiated[pf$year_joined.bucket = 1]
pf$prop_initiated[pf$year_joined.bucket = 1,]
subset(pf, year_jointed.bucket = 1)
post2012 <- subset(pf, year_jointed.bucket = 1)
mean(post2012$prop_initiated)
post2012 <- subset(pf, year_jointed.bucket = 1 && prop_initated != 0)
mean(post2012$prop_initiated)
?subset
post2012 <- subset(pf, year_jointed.bucket = 1 && prop_initated > 0)
post2012 <- subset(pf, year_jointed.bucket = 1 | prop_initated > 0)
post2012 <- subset(pf, year_jointed.bucket = 1 | prop_initated <> 0)
post2012 <- subset(pf, year_jointed.bucket = 1 | prop_initated != 0)
post2012 <- subset(pf, year_jointed.bucket = 1 || prop_initated != 0)
post2012 <- subset(pf, prop_initated != 0)
post2012 <- subset(pf, prop_initiated != 0)
post2012 <- subset(pf, year_jointed.bucket = 1 && prop_initiated != 0)
post2012 <- subset(pf, year_jointed.bucket = 1 | prop_initiated != 0)
post2012 <- subset(pf, year_jointed.bucket = 1 | prop_initiated > 0)
post2012 <- subset(pf, prop_initiated > 0)
post2012 <- subset(pf, prop_initiated > 0 & year_jointed.bucket = 1)
post2012 <- subset(pf, prop_initiated > 0 | year_jointed.bucket = 1)
post2012 <- subset(pf, prop_initiated > 0 & year_jointed.bucket = 1)
post2012 <- subset(pf, prop_initiated > 0 & year_joined.bucket = 1)
post2012 <- subset(pf, year_jointed.bucket = 1 & prop_initiated != 0)
post2012 <- subset(pf, year_jointed.bucket = 1 & prop_initiated > 0)
post2012
post2012[prop_initiated > 0]
post2012[post2012$prop_initiated > 0]
post2012[post2012$prop_initiated > 0,]
post2012 <- subset(pf, year_jointed.bucket = 1 & prop_initiated > 0,)
post2012 <- pf[pf$year_jointed.bucket = 1 & prop_initiated > 0,]
post2012 <- pf[pf$year_jointed.bucket == 1 & prop_initiated > 0,]
post2012 <- pf[pf$year_jointed.bucket == 1 & pf$prop_initiated > 0,]
post2012 <- pf[pf$year_jointed.bucket = 1 & pf$prop_initiated > 0,]
post2012 <- pf[pf$year_jointed.bucket == 1 & pf$prop_initiated > 0,]
post2012 <- subset(pf, year_jointed.bucket == 1 & prop_initiated > 0)
post2012 <- subset(pf, year_joined.bucket == 1 & prop_initiated > 0)
post2012 <- subset(pf, year_joined.bucket == 1 & prop_initiated != 0)
post2012 <- subset(pf, year_joined.bucket = 1 & prop_initiated != 0)
post2012 <- subset(subset(pf, prop_initiated > 0), year_joined.bucket = 1)
post2012 <- subset(subset(pf, prop_initiated > 0), year_joined.bucket == 1)
post2012 <- subset(subset(pf, prop_initiated > 0), year_joined.bucket = 1)
pf$year_joined
pf$year_joined.bucket
post2012 <- subset(subset(pf, prop_initiated > 0), levels(year_joined.bucket) = "(2012,2014]")
post2012 <- subset(subset(pf, prop_initiated > 0), levels(year_joined.bucket) = "(2012,2014])
post2012 <- subset(subset(pf, prop_initiated > 0), levels(year_joined.bucket) = (2012,2014])
post2012 <- subset(subset(pf, prop_initiated > 0), levels(year_joined.bucket) == (2012,2014])
post2012 <- subset(subset(pf, prop_initiated > 0), levels(year_joined.bucket) == 1)
levels(pf$year_joined.bucket)
post2012 <- subset(subset(pf, prop_initiated > 0), year_joined.bucket == "(2012,2014]")
mean(post2012$por)
mean(post2012$prop_initiated)
post2012 <- subset(year_joined.bucket == "(2012,2014]")
post2012 <- subset(pf, year_joined.bucket == "(2012,2014]")
mean(post2012$prop_initiated)
ggplot(diamondsMB, aes(x = cut, y = price / carat, color = color)) +
geom_point() +
facet_wrap() +
scale_color_brewer(type = 'div')
ggplot(diamondsMB, aes(x = cut, y = price / carat, color = color)) +
geom_point() +
facet_wrap(~clarity) +
scale_color_brewer(type = 'div')
ggplot(diamondsMB, aes(x = cut, y = price / carat, color = color)) +
geom_point() +
position_jitter() +
facet_wrap(~clarity) +
scale_color_brewer(type = 'div')
ggplot(diamondsMB, aes(x = cut, y = price / carat, color = color)) +
geom_point(position = 'jitter') +
facet_wrap(~clarity) +
scale_color_brewer(type = 'div')
ggplot(diamonds, aes(x = cut, y = price / carat, color = color)) +
geom_point(position = 'jitter') +
facet_wrap(~clarity) +
scale_color_brewer(type = 'div')
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
library(gridExtra)
library(GGally)
library(reshape2)
# Load the Data
wine_quality <- read.csv("../Data/wineQualityReds.csv")
ggplot(wine_quality, aes(x=1, y=citric.acid)) +
geom_boxplot() +
xlab(NULL) +
theme(axis.text.y=element_blank()) +
coord_flip() +
scale_y_continuous(limits = c(0, 1.1), breaks = seq(0, 1.1, 0.1))
ggplot(data = wine_quality, aes(x = citric.acid)) + geom_density()
ggplot(data = wine_quality, aes(x = citric.acid)) + geom_histogram(binwidth = 0.01)
# http://mgimond.github.io/ES218/Week05a.html
ggplot(wine_quality, aes(x=1, y=citric.acid)) +
geom_boxplot() +
xlab(NULL) +
theme(axis.text.y=element_blank()) +
coord_flip() +
scale_y_continuous(limits = c(0, 1.1), breaks = seq(0, 1.1, 0.1))
ggplot(data = subset(wine_quality, citric.acid > 0), aes(x = citric.acid)) + geom_density()
ggplot(data = wine_quality, aes(x = citric.acid)) + geom_histogram(binwidth = 0.01)
# http://mgimond.github.io/ES218/Week05a.html
ggplot(wine_quality, aes(x=1, y=citric.acid)) +
geom_boxplot() +
xlab(NULL) +
theme(axis.text.y=element_blank()) +
coord_flip() +
scale_y_continuous(limits = c(0, 1.1), breaks = seq(0, 1.1, 0.1))
ggplot(wine_quality, aes(x=1, y=alcohol)) +
geom_boxplot() +
xlab(NULL) +
theme(axis.text.y=element_blank()) +
coord_flip()
scale_y_continuous(limits = c(0, 15), breaks = seq(0, 15, 0.1))
# http://mgimond.github.io/ES218/Week05a.html
ggplot(wine_quality, aes(x=1, y=alcohol)) +
geom_boxplot() +
xlab(NULL) +
theme(axis.text.y=element_blank()) +
coord_flip()
scale_y_continuous(limits = c(0, 15), breaks = seq(0, 15, 0.1))
# http://mgimond.github.io/ES218/Week05a.html
ggplot(wine_quality, aes(x=1, y=alcohol)) +
geom_boxplot() +
xlab(NULL) +
theme(axis.text.y=element_blank()) +
coord_flip() +
scale_y_continuous(limits = c(0, 15), breaks = seq(0, 15, 0.1))
# http://mgimond.github.io/ES218/Week05a.html
ggplot(wine_quality, aes(x=1, y=alcohol)) +
geom_boxplot() +
xlab(NULL) +
theme(axis.text.y=element_blank()) +
coord_flip() +
scale_y_continuous(limits = c(0, 15), breaks = seq(8, 15, 0.1))
# http://mgimond.github.io/ES218/Week05a.html
ggplot(wine_quality, aes(x=1, y=alcohol)) +
geom_boxplot() +
xlab(NULL) +
theme(axis.text.y=element_blank()) +
coord_flip() +
scale_y_continuous(limits = c(8, 15), breaks = seq(8, 15, 0.1))
# http://mgimond.github.io/ES218/Week05a.html
ggplot(wine_quality, aes(x=1, y=alcohol)) +
geom_boxplot() +
xlab(NULL) +
theme(axis.text.y=element_blank()) +
coord_flip() +
scale_y_continuous(limits = c(8, 15), breaks = seq(8, 15))
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
library(gridExtra)
library(GGally)
library(reshape2)
# Load the Data
wine_quality <- read.csv("../Data/wineQualityReds.csv")
summary(wine_quality)
wine_quality$quality <- factor(ordered(wine_quality$quality))
str(wine_quality$quality)
summary(wine_quality$quality)
ggplot(data = wine_quality, aes(x = quality)) + geom_bar(stat = "count")
qual_mean <- mean(as.numeric(levels(wine_quality$quality)[wine_quality$quality]))
qual_sd <- sd(as.numeric(levels(wine_quality$quality)[wine_quality$quality]))
qual_mean
qual_sd
ggplot(data = wine_quality, aes(x = fixed.acidity)) + geom_density()
ggplot(data = wine_quality, aes(x = volatile.acidity)) + geom_density()
ggplot(data = wine_quality, aes(x = citric.acid)) + geom_density()
ggplot(data = wine_quality, aes(x = citric.acid)) + geom_histogram(binwidth = 0.01)
# http://mgimond.github.io/ES218/Week05a.html
ggplot(wine_quality, aes(x=1, y=citric.acid)) +
geom_boxplot() +
xlab(NULL) +
theme(axis.text.y=element_blank()) +
coord_flip() +
scale_y_continuous(limits = c(0, 1.1), breaks = seq(0, 1.1, 0.1))
ggplot(data = wine_quality, aes(x = pH)) + geom_density()
ggplot(data = wine_quality, aes(x = free.sulfur.dioxide)) + geom_density()
ggplot(data = wine_quality, aes(x = total.sulfur.dioxide)) + geom_density()
ggplot(data = wine_quality, aes(x = sulphates)) + geom_density()
ggplot(data = wine_quality, aes(x = alcohol)) + geom_density()
# http://mgimond.github.io/ES218/Week05a.html
ggplot(wine_quality, aes(x=1, y=alcohol)) +
geom_boxplot() +
xlab(NULL) +
theme(axis.text.y=element_blank()) +
coord_flip() +
scale_y_continuous(limits = c(8, 15), breaks = seq(8, 15))
ggplot(data = wine_quality, aes(x = density)) + geom_density()
ggplot(aes(x = residual.sugar), data = wine_quality) + geom_density()
ggplot(aes(x = residual.sugar), data = wine_quality) +
geom_density() +
scale_x_continuous(limits = c(0, 6))
ggplot(aes(x = residual.sugar), data = wine_quality) +
geom_density() +
scale_x_continuous(limits = c(3, 7))
# http://mgimond.github.io/ES218/Week05a.html
ggplot(wine_quality, aes(x=1, y=residual.sugar)) +
geom_boxplot() +
xlab(NULL) +
theme(axis.text.y=element_blank()) +
coord_flip() +
scale_y_continuous(limits = c(0, 17), breaks = c(0:17))
ggplot(aes(x = chlorides), data = wine_quality) +
geom_density()
str(wine_quality)
# https://briatte.github.io/ggcorr/
wq <- wine_quality[, !(names(wine_quality) %in% c("X"))]
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
data.frame(wq.cor)
# Using default continuous color map
ggcorr(wq, label = TRUE, hjust = 0.9, layout.exp = 2)
# Using default descrete color map
ggcorr(wq, nbreaks = 3, label = TRUE, hjust = 0.9, layout.exp = 2)
ggplot(wine_quality, aes(x = quality, y = alcohol)) +
geom_jitter(alpha = 1/10)
# http://stackoverflow.com/questions/3989987/joining-means-on-a-boxplot-with-a-line-ggplot2
ggplot(wine_quality, aes(x = quality, y = alcohol)) +
geom_boxplot() +
# aes(group = 1) added to line plot forces stat_summary to be scoped to pre-aggregated data so line can connect means from each group
stat_summary(aes(group = 1), fun.y = mean, geom = "line", show.legend = FALSE) +
stat_summary(fun.y = mean, geom = "point", shape = "µ", size = 2, show.legend = FALSE)
summary(wine_quality$quality)
# http://stackoverflow.com/questions/3989987/joining-means-on-a-boxplot-with-a-line-ggplot2
ggplot(wine_quality, aes(x = quality, y = volatile.acidity)) +
geom_boxplot() +
# aes(group = 1) added to line plot forces stat_summary to be scoped to pre-aggregated data so line can connect means from each group
stat_summary(aes(group = 1), fun.y = mean, geom = "line", show.legend = FALSE) +
stat_summary(fun.y = mean, geom = "point", shape = "µ", size = 2, show.legend = FALSE)
# http://stackoverflow.com/questions/3989987/joining-means-on-a-boxplot-with-a-line-ggplot2
ggplot(wine_quality, aes(x = quality, y = sulphates)) +
geom_boxplot() +
# aes(group = 1) added to line plot forces stat_summary to be scoped to pre-aggregated data so line can connect means from each group
stat_summary(aes(group = 1), fun.y = mean, geom = "line", show.legend = FALSE) +
stat_summary(fun.y = mean, geom = "point", shape = "µ", size = 2, show.legend = FALSE)
ggplot(wine_quality, aes(x = sulphates, y = chlorides)) +
geom_point(alpha = 1/15)
ggplot(wine_quality, aes(x = citric.acid, y = volatile.acidity)) +
geom_point(alpha = 1/10)
ggplot(wine_quality, aes(x = citric.acid, y = volatile.acidity)) +
geom_point(alpha = 1/10) +
scale_x_continuous(limits = c(0.3, 1.0), breaks = seq(0.3, 1.0, 0.05))
ggplot(wine_quality, aes(x = citric.acid, y = volatile.acidity)) +
geom_point(alpha = 1/10) +
scale_x_continuous(limits = c(0.3, 1.0), breaks = seq(0.3, 1.0, 0.05)) +
stat_smooth(method = "lm")
ggplot(wine_quality, aes(x = citric.acid, y = fixed.acidity)) +
geom_point(alpha = 1/10)
ggplot(wine_quality, aes(x = citric.acid, y = log(fixed.acidity))) +
geom_point(alpha = 1/10) +
stat_smooth(method = "lm")
# http://stackoverflow.com/questions/34975190/set-alpha-and-remove-black-outline-of-density-plots-in-ggpairs
ggscatalpha <- function(data, mapping, ...) {
ggplot(data = data, mapping = mapping) +
geom_point(..., alpha = 0.25)
}
ggdensalpha <- function(data, mapping, ...) {
ggplot(data = data, mapping = mapping) +
geom_density(..., alpha = 0.25)
}
wq.names.acid <- c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")
ggpairs(wine_quality,
columns = wq.names.acid,
mapping = aes(color = quality),
lower = list(continuous = ggscatalpha),
diag = list(continuous = ggdensalpha))
wq.names.sulphur <- c("free.sulfur.dioxide", "total.sulfur.dioxide", "sulphates", "chlorides")
ggpairs(wine_quality,
columns = wq.names.sulphur,
mapping = aes(color = quality),
lower = list(continuous = ggscatalpha),
diag = list(continuous = ggdensalpha))
wq.names.alcohol <- c("alcohol", "residual.sugar", "density")
ggpairs(wine_quality,
columns = wq.names.alcohol,
mapping = aes(color = quality),
lower = list(continuous = ggscatalpha),
diag = list(continuous = ggdensalpha))
ggplot(wine_quality, aes(x = citric.acid, y = log(fixed.acidity))) +
geom_point(alpha = 1/10) +
stat_smooth(method = "lm")
ggplot(wine_quality, aes(x = citric.acid, y = fixed.acidity)) +
geom_point(alpha = 1/10) +
stat_smooth(method = "lm")
ggplot(wine_quality, aes(x = citric.acid, y = fixed.acidity)) +
geom_point(alpha = 1/10) +
stat_smooth(method = "lm")
ggplot(wine_quality, aes(x = citric.acid, y = log(fixed.acidity))) +
geom_point(alpha = 1/10) +
stat_smooth(method = "lm")
