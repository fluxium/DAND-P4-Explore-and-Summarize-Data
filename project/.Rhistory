update.packages()
update.packages(asl = FALSE)
update.packages(ask = FALSE)
update.packages()
update.packages(ask = FALSE)
install.packages("rmarkdown")
update.packages(ask = FALSE)
update.packages(rmarkdown)
update.packages("rmarkdown")
update.packages(repos = getOption(repos))
update.packages(repos = getOption("repos"))
getOption("repos")
version
```
# Chunk 1
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(dplyr)
library(tidyr)
# Chunk 2
# Load the Data
wine_quality <- read.csv("../Data/wineQualityReds.csv")
# Chunk 3
str(wine_quality)
summary(wine_quality)
# Chunk 4
wine_quality$quality <- factor(ordered(wine_quality$quality))
str(wine_quality$quality)
summary(wine_quality$quality)
# Chunk 5
ggplot(data = wine_quality, aes(x = quality)) + geom_bar(stat = "count")
# Chunk 6
qual_mean <- mean(as.numeric(levels(wine_quality$quality)[wine_quality$quality]))
qual_sd <- sd(as.numeric(levels(wine_quality$quality)[wine_quality$quality]))
qual_mean
qual_sd
# Chunk 7
ggplot(data = wine_quality, aes(x = fixed.acidity)) + geom_histogram(binwidth = 0.2)
# Chunk 8
ggplot(data = wine_quality, aes(x = volatile.acidity)) + geom_histogram(binwidth = 0.03)
# Chunk 9
ggplot(data = wine_quality, aes(x = citric.acid)) + geom_histogram(binwidth = 0.02)
# Chunk 10
ggplot(data = wine_quality, aes(x = citric.acid)) + geom_histogram(binwidth = 0.01)
# Chunk 11
#wine_quality$citric.acid
cond <- wine_quality$citric.acid == 0.49
wine_quality[cond,]
# Chunk 12
ggplot(data = wine_quality, aes(x = pH)) + geom_histogram(binwidth = 0.02)
# Chunk 13
ggplot(data = wine_quality, aes(x = free.sulfur.dioxide)) + geom_histogram(binwidth = 1)
# Chunk 14
ggplot(data = wine_quality, aes(x = total.sulfur.dioxide)) + geom_histogram(binwidth = 3)
# Chunk 15
ggplot(data = wine_quality, aes(x = sulphates)) + geom_histogram(binwidth = 0.02)
# Chunk 16
# Chunk 17
# Chunk 18
# Chunk 19
# Chunk 20
install.packages(c("dplyr", "tidyr", "ggplot2"))
install.packages(c("dplyr", "tidyr", "ggplot2"))
update.packages()
update.packages(ask = FALSE)
update.packages(ask = FALSE)
install.packages("tidyr")
install.packages("knitr")
install.packages("ggplot2")
ggplot(data = wine_quality, aes(x = free.sulfur.dioxide)) + geom_histogram(binwidth = 1)
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(dplyr)
library(tidyr)
# Load the Data
wine_quality <- read.csv("../Data/wineQualityReds.csv")
str(wine_quality)
summary(wine_quality)
wine_quality$quality <- factor(ordered(wine_quality$quality))
str(wine_quality$quality)
summary(wine_quality$quality)
ggplot(data = wine_quality, aes(x = quality)) + geom_bar(stat = "count")
qual_mean <- mean(as.numeric(levels(wine_quality$quality)[wine_quality$quality]))
qual_sd <- sd(as.numeric(levels(wine_quality$quality)[wine_quality$quality]))
qual_mean
qual_sd
ggplot(data = wine_quality, aes(x = fixed.acidity)) + geom_histogram(binwidth = 0.2)
ggplot(data = wine_quality, aes(x = volatile.acidity)) + geom_histogram(binwidth = 0.03)
ggplot(data = wine_quality, aes(x = citric.acid)) + geom_histogram(binwidth = 0.02)
ggplot(data = wine_quality, aes(x = citric.acid)) + geom_histogram(binwidth = 0.01)
#wine_quality$citric.acid
cond <- wine_quality$citric.acid == 0.49
wine_quality[cond,]
ggplot(data = wine_quality, aes(x = pH)) + geom_histogram(binwidth = 0.02)
ggplot(data = wine_quality, aes(x = free.sulfur.dioxide)) + geom_histogram(binwidth = 1)
ggplot(data = wine_quality, aes(x = total.sulfur.dioxide)) + geom_histogram(binwidth = 3)
ggplot(data = wine_quality, aes(x = sulphates)) + geom_histogram(binwidth = 0.02)
install.packages("rmarkdown")
install.packages('rmarkdown', repos = "https://mran.revolutionanalytics.com/snapshot/2016-12-01/bin/windows/contrib/3.3/")
install.packages('rmarkdown', repos = "https://mran.revolutionanalytics.com/snapshot/2016-12-01/")
getwd()
install.packages("devtools")
install_github("ohdsi/SqlRender")
library(devtools)
install_github("ohdsi/SqlRender")
install_github("ohdsi/DatabaseConnector")
install.packages("fastmatch")
install_github("ohdsi/Achilles")
install_github("ohdsi/DatabaseConnector")
install_github("ohdsi/Achilles")
library(Achilles)
cd <- createConnectionDetails(dbms = "sql server", server = "vosql16dev")
conn <- connect(cd)
conn <- connect(cd)
conn <- connect(cd)
conn <- connect(cd)
library(Achilles)
cd <- createConnectionDetails(dbms = "sql server", server = "vosql16dev")
conn <- connect(cd)
conn <- connect(cd)
library(Achilles)
cd <- createConnectionDetails(dbms = "sql server", server = "vosql16dev")
conn <- connect(cd)
conn
cd <- createConnectionDetails(dbms = "sql server", server = "vosql16dev", schema = "VWDGSData_Tolko_Lavington")
conn <- connect(cd)
trimmer <- querySql(conn, "select * from tblSM_Trimmer1_PieceSummary")
trimemr
trimmer
str(trimmer)
head(trimmer)
summary(trimmer)
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
library(gridExtra)
library(GGally)
library(reshape2)
# Load the Data
wine_quality <- read.csv("../Data/wineQualityReds.csv")
summary(wine_quality)
wine_quality$quality <- factor(ordered(wine_quality$quality))
str(wine_quality$quality)
summary(wine_quality$quality)
ggplot(data = wine_quality, aes(x = quality)) + geom_bar(stat = "count")
qual_mean <- mean(as.numeric(levels(wine_quality$quality)[wine_quality$quality]))
qual_sd <- sd(as.numeric(levels(wine_quality$quality)[wine_quality$quality]))
qual_mean
qual_sd
ggplot(data = wine_quality, aes(x = fixed.acidity)) + geom_density()
ggplot(data = wine_quality, aes(x = volatile.acidity)) + geom_density()
ggplot(data = wine_quality, aes(x = citric.acid)) + geom_density()
ggplot(data = wine_quality, aes(x = citric.acid)) + geom_histogram(binwidth = 0.01)
# http://mgimond.github.io/ES218/Week05a.html
ggplot(wine_quality, aes(x=1, y=citric.acid)) +
geom_boxplot() +
xlab(NULL) +
theme(axis.text.y=element_blank()) +
coord_flip() +
scale_y_continuous(limits = c(0, 1.1), breaks = seq(0, 1.1, 0.1))
ggplot(data = wine_quality, aes(x = pH)) + geom_density()
ggplot(data = wine_quality, aes(x = free.sulfur.dioxide)) + geom_density()
ggplot(data = wine_quality, aes(x = total.sulfur.dioxide)) + geom_density()
ggplot(data = wine_quality, aes(x = sulphates)) + geom_density()
ggplot(data = wine_quality, aes(x = alcohol)) + geom_density()
ggplot(data = wine_quality, aes(x = density)) + geom_density()
ggplot(aes(x = residual.sugar), data = wine_quality) + geom_density()
ggplot(aes(x = residual.sugar), data = wine_quality) +
geom_density() +
scale_x_continuous(limits = c(0, 6))
ggplot(aes(x = residual.sugar), data = wine_quality) +
geom_density() +
scale_x_continuous(limits = c(3, 7))
# http://mgimond.github.io/ES218/Week05a.html
ggplot(wine_quality, aes(x=1, y=residual.sugar)) +
geom_boxplot() +
xlab(NULL) +
theme(axis.text.y=element_blank()) +
coord_flip() +
scale_y_continuous(limits = c(0, 17), breaks = seq(0, 17, 1))
str(wine_quality)
wq <- wine_quality[, !(names(wine_quality) %in% c("X"))]
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
data.frame(wq.cor)
# Using default continuous color map
ggcorr(wq, label = TRUE, hjust = 0.9, layout.exp = 2)
# Using default descrete color map
ggcorr(wq, nbreaks = 3, label = TRUE, hjust = 0.9, layout.exp = 2)
# http://stackoverflow.com/questions/34975190/set-alpha-and-remove-black-outline-of-density-plots-in-ggpairs
ggscatalpha <- function(data, mapping, ...) {
ggplot(data = data, mapping = mapping) +
geom_point(..., alpha = 0.25)
}
ggdensalpha <- function(data, mapping, ...) {
ggplot(data = data, mapping = mapping) +
geom_density(..., alpha = 0.25)
}
wq.names.acid <- c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")
ggpairs(wine_quality,
columns = wq.names.acid,
mapping = aes(color = quality),
lower = list(continuous = ggscatalpha),
diag = list(continuous = ggdensalpha))
wq.names.sulphur <- c("free.sulfur.dioxide", "total.sulfur.dioxide", "sulphates", "chlorides")
ggpairs(wine_quality,
columns = wq.names.sulphur,
mapping = aes(color = quality),
lower = list(continuous = ggscatalpha),
diag = list(continuous = ggdensalpha))
wq.names.alcohol <- c("alcohol", "residual.sugar", "density")
ggpairs(wine_quality,
columns = wq.names.alcohol,
mapping = aes(color = quality),
lower = list(continuous = ggscatalpha),
diag = list(continuous = ggdensalpha))
ggplot(wine_quality, aes(x = quality, y = alcohol)) +
geom_point()
ggplot(wine_quality, aes(x = quality, y = alcohol)) +
geom_boxplot()
ggplot(wine_quality, aes(x = quality, y = alcohol)) +
geom_point(alpha = 1/50)
ggplot(wine_quality, aes(x = quality, y = alcohol)) +
geom_point(alpha = 1/25)
ggplot(wine_quality, aes(x = quality, y = alcohol)) +
geom_point(alpha = 1/10)
ggplot(wine_quality, aes(x = quality, y = alcohol)) +
geom_point(alpha = 1/25)
summary(wine_quality$quality)
library(ggplot2)
pf <- read.delim('../datasets/pseudo_facebook.tsv')
pf
qplot(x = age, y = friend_count, data = pf)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point() +
xlim(13, 90)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20) +
xlim(13, 90)
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_jitter(alpha = 1/20) +
xlim(13, 90)
ggplot(aes(x = age, y = friend_count), data = subset(pf, friend_count > 0 || age > 0)) +
geom_jitter(alpha = 1/20) +
xlim(13, 90)
# geom_jitter() introduces noise (+ and -) that could create values that would be imaginary when passed to sqrt
?coord_trans
ggplot(aes(x = age, y = friend_count), data = subset(pf, friend_count > 0 || age > 0)) +
geom_point(alpha = 1/20, position = position_jitter(h = 0)) +
xlim(13, 90) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friend_count), data = subset(pf, friend_count > 0 || age > 0)) +
geom_point(alpha = 1/20) +
xlim(13, 90) +
coord_trans(y = "sqrt")
ggplot(aes(x = age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h = 0)) +
scale_x_continuous(limits = c(13,90), breaks = seq(13, 90, 2)) +
coord_trans(y = "sqrt")
library(dplyr)
pf.fc_by_age <- group_by(pf, age) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age)
head(pf.fc_by_age)
ggplot(aes(y = friend_count_mean, x = age), data = pf.fc_by_age) +
geom_line()
ggplot(aes(y = friend_count_median, x = age), data = pf.fc_by_age) +
geom_line()
ggplot(aes(x = age, y = friend_count), data = pf) +
geom_point(alpha = 1/20,
position = position_jitter(h = 0),
color = 'orange') +
geom_line(stat = "summary", fun.y = mean) +
geom_line(stat = "summary", fun.y = quantile,
fun.args = list(probs = 0.1),
linetype = 2, color = 'blue') +
geom_line(stat = "summary", fun.y = quantile,
fun.args = list(probs = 0.5),
linetype = 2, color = 'blue') +
geom_line(stat = "summary", fun.y = quantile,
fun.args = list(probs = 0.9),
linetype = 2, color = 'blue') +
coord_cartesian(xlim = c(13,70), ylim = c(0, 1000) )
#coord_trans(y = "sqrt") +
#scale_x_continuous(limits = c(13,90), breaks = seq(13, 90, 2)) +
?cor.test
cor.test(pf$age, pf$friend_count)
with(pf, cor.test(age, friend_count))
with(subset(pf, age <= 70), cor.test(age, friend_count))
with(pf, qplot(likes_received, www_likes_received))
ggplot(aes(x = log10(www_likes_received), y = log10(likes_received)), data = pf) +
geom_point(alpha = 1/40, position = position_jitter(h = 0)) +
scale_x_log10() +
scale_y_log10() +
coord_trans(x = 'log10', y = 'log10')
library(ggplot2)
pf <- read.delim('../datasets/pseudo_facebook.tsv')
pf
qplot(x = age, y = friend_count, data = pf)
ggplot(aes(x = www_likes_received, y = likes_received), data = pf) +
geom_point(alpha = 1/40, position = position_jitter(h = 0)) +
xlim(0, quantile(pf$www_likes_received, 0.95)) +
ylim(0, quantile(pf$likes_received, 0.95))+
geom_smooth(method = 'lm', color = 'red')
with(pf, cor.test(likes_received, www_likes_received))
install.packages('alr3')
library(alr3)
data(Mitchell)
head(Mitchell)
ggplot(aes(x = Month, y = Temp), data = Mitchell) +
geom_point()
with(Mitchell, cor.test(Month, Temp))
# cyclical pattern
ggplot(aes(x = Month, y = Temp), data = Mitchell) +
geom_point() +
scale_x_discrete(breaks = seq(0, 200, 12))
ggplot(aes(x=(Month%%12),y=Temp),data=Mitchell)+
geom_point()
install.packages('energy')
library(energy)
x <- seq(0, 4*pi, pi/20)
y <- cos(x)
qplot(x = x, y = y)
energy::dcor.ttest(x, y)
pf$age_with_months = pf$age + (1 - (pf$dob_month / 12)) # or
pf$age_with_months = pf$age + ((12 - pf$dob_month) / 12)
library(dplyr)
pf.fc_by_age_months <- group_by(pf, age_with_months) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age_with_months)
head(pf.fc_by_age_months)
ggplot(aes(y = friend_count_mean, x = age_with_months), data = pf.fc_by_age_months) +
geom_line()
ggplot(aes(y = friend_count_median, x = age_with_months), data = pf.fc_by_age_months) +
geom_line()
ggplot(aes(y = friend_count_median, x = age_with_months), data = subset(pf.fc_by_age_months, age_with_months < 71)) +
geom_point()
ggplot(aes(y = friend_count_median, x = age_with_months), data = subset(pf.fc_by_age_months, age_with_months < 71)) +
geom_line()
setwd(H:\Source\Repos\DAND-P4-Explore-and-Summarize-Data\project)
setwd("H:\Source\Repos\DAND-P4-Explore-and-Summarize-Data\project")
setwd("H:/Source/Repos/DAND-P4-Explore-and-Summarize-Data/project")
