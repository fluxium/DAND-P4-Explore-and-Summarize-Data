update.packages()
update.packages(asl = FALSE)
update.packages(ask = FALSE)
update.packages()
update.packages(ask = FALSE)
install.packages("rmarkdown")
update.packages(ask = FALSE)
update.packages(rmarkdown)
update.packages("rmarkdown")
update.packages(repos = getOption(repos))
update.packages(repos = getOption("repos"))
getOption("repos")
version
```
# Chunk 1
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(dplyr)
library(tidyr)
# Chunk 2
# Load the Data
wine_quality <- read.csv("../Data/wineQualityReds.csv")
# Chunk 3
str(wine_quality)
summary(wine_quality)
# Chunk 4
wine_quality$quality <- factor(ordered(wine_quality$quality))
str(wine_quality$quality)
summary(wine_quality$quality)
# Chunk 5
ggplot(data = wine_quality, aes(x = quality)) + geom_bar(stat = "count")
# Chunk 6
qual_mean <- mean(as.numeric(levels(wine_quality$quality)[wine_quality$quality]))
qual_sd <- sd(as.numeric(levels(wine_quality$quality)[wine_quality$quality]))
qual_mean
qual_sd
# Chunk 7
ggplot(data = wine_quality, aes(x = fixed.acidity)) + geom_histogram(binwidth = 0.2)
# Chunk 8
ggplot(data = wine_quality, aes(x = volatile.acidity)) + geom_histogram(binwidth = 0.03)
# Chunk 9
ggplot(data = wine_quality, aes(x = citric.acid)) + geom_histogram(binwidth = 0.02)
# Chunk 10
ggplot(data = wine_quality, aes(x = citric.acid)) + geom_histogram(binwidth = 0.01)
# Chunk 11
#wine_quality$citric.acid
cond <- wine_quality$citric.acid == 0.49
wine_quality[cond,]
# Chunk 12
ggplot(data = wine_quality, aes(x = pH)) + geom_histogram(binwidth = 0.02)
# Chunk 13
ggplot(data = wine_quality, aes(x = free.sulfur.dioxide)) + geom_histogram(binwidth = 1)
# Chunk 14
ggplot(data = wine_quality, aes(x = total.sulfur.dioxide)) + geom_histogram(binwidth = 3)
# Chunk 15
ggplot(data = wine_quality, aes(x = sulphates)) + geom_histogram(binwidth = 0.02)
# Chunk 16
# Chunk 17
# Chunk 18
# Chunk 19
# Chunk 20
install.packages(c("dplyr", "tidyr", "ggplot2"))
install.packages(c("dplyr", "tidyr", "ggplot2"))
update.packages()
update.packages(ask = FALSE)
update.packages(ask = FALSE)
install.packages("tidyr")
install.packages("knitr")
install.packages("ggplot2")
ggplot(data = wine_quality, aes(x = free.sulfur.dioxide)) + geom_histogram(binwidth = 1)
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(dplyr)
library(tidyr)
# Load the Data
wine_quality <- read.csv("../Data/wineQualityReds.csv")
str(wine_quality)
summary(wine_quality)
wine_quality$quality <- factor(ordered(wine_quality$quality))
str(wine_quality$quality)
summary(wine_quality$quality)
ggplot(data = wine_quality, aes(x = quality)) + geom_bar(stat = "count")
qual_mean <- mean(as.numeric(levels(wine_quality$quality)[wine_quality$quality]))
qual_sd <- sd(as.numeric(levels(wine_quality$quality)[wine_quality$quality]))
qual_mean
qual_sd
ggplot(data = wine_quality, aes(x = fixed.acidity)) + geom_histogram(binwidth = 0.2)
ggplot(data = wine_quality, aes(x = volatile.acidity)) + geom_histogram(binwidth = 0.03)
ggplot(data = wine_quality, aes(x = citric.acid)) + geom_histogram(binwidth = 0.02)
ggplot(data = wine_quality, aes(x = citric.acid)) + geom_histogram(binwidth = 0.01)
#wine_quality$citric.acid
cond <- wine_quality$citric.acid == 0.49
wine_quality[cond,]
ggplot(data = wine_quality, aes(x = pH)) + geom_histogram(binwidth = 0.02)
ggplot(data = wine_quality, aes(x = free.sulfur.dioxide)) + geom_histogram(binwidth = 1)
ggplot(data = wine_quality, aes(x = total.sulfur.dioxide)) + geom_histogram(binwidth = 3)
ggplot(data = wine_quality, aes(x = sulphates)) + geom_histogram(binwidth = 0.02)
install.packages("rmarkdown")
install.packages('rmarkdown', repos = "https://mran.revolutionanalytics.com/snapshot/2016-12-01/bin/windows/contrib/3.3/")
install.packages('rmarkdown', repos = "https://mran.revolutionanalytics.com/snapshot/2016-12-01/")
getwd()
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
install.packages("lubridate")
install.packages(c("gridExtra", "GGally", "reshape2")
)
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
library(gridExtra)
library(GGally)
library(reshape2)
setwd("C:/Users/Mahlon/Source/Repos/DAND-P4-Explore-and-Summarize-Data/project/")
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
library(gridExtra)
library(GGally)
library(reshape2)
try(
setwd("C:/Users/Mahlon/Source/Repos/DAND-P4-Explore-and-Summarize-Data/project/")
)
try(
setwd("C:\Source\Repos\DAND-P4-Explore-and-Summarize-Data\project")
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
library(gridExtra)
library(GGally)
library(reshape2)
try(
setwd("C:/Users/Mahlon/Source/Repos/DAND-P4-Explore-and-Summarize-Data/project/")
)
try(
setwd("C:/Source/Repos/DAND-P4-Explore-and-Summarize-Data/project/")
)
# Load the Data
wine_quality <- read.csv("../Data/wineQualityReds.csv")
summary(wine_quality)
wine_quality$quality <- factor(ordered(wine_quality$quality))
str(wine_quality$quality)
summary(wine_quality$quality)
ggplot(data = wine_quality, aes(x = quality)) + geom_bar(stat = "count")
qual_mean <- mean(as.numeric(levels(wine_quality$quality)[wine_quality$quality]))
qual_sd <- sd(as.numeric(levels(wine_quality$quality)[wine_quality$quality]))
qual_mean
qual_sd
ggplot(data = wine_quality, aes(x = fixed.acidity)) + geom_histogram(binwidth = 0.2)
ggplot(data = wine_quality, aes(x = volatile.acidity)) + geom_histogram(binwidth = 0.03)
ggplot(data = wine_quality, aes(x = citric.acid)) + geom_histogram(binwidth = 0.01)
#wine_quality$citric.acid
cond <- wine_quality$citric.acid == 0.49
wine_quality[cond,]
ggplot(data = wine_quality, aes(x = pH)) + geom_histogram(binwidth = 0.02)
ggplot(data = wine_quality, aes(x = free.sulfur.dioxide)) + geom_histogram(binwidth = 1)
ggplot(data = wine_quality, aes(x = total.sulfur.dioxide)) + geom_histogram(binwidth = 3)
ggplot(data = wine_quality, aes(x = sulphates)) + geom_histogram(binwidth = 0.02)
ggplot(data = wine_quality, aes(x = alcohol)) + geom_histogram(binwidth = 0.1)
ggplot(data = wine_quality, aes(x = density)) + geom_histogram(binwidth = 0.0002)
ggplot(aes(x = residual.sugar), data = wine_quality) +
geom_histogram(binwidth = 0.1)
ggplot(aes(x = residual.sugar), data = wine_quality) +
geom_histogram(binwidth = 0.1) +
scale_x_continuous(limits = c(0, 6))
ggplot(aes(x = residual.sugar), data = wine_quality) +
geom_histogram(binwidth = 0.1) +
scale_x_continuous(limits = c(3, 6))
str(wine_quality)
# http://stackoverflow.com/questions/34975190/set-alpha-and-remove-black-outline-of-density-plots-in-ggpairs
ggscatalpha <- function(data, mapping, ...) {
ggplot(data = data, mapping = mapping) +
geom_point(..., alpha = 0.25)
}
ggdensalpha <- function(data, mapping, ...) {
ggplot(data = data, mapping = mapping) +
geom_density(..., alpha = 0.25)
}
wq.names.acid <- c("fixed.acidity", "volatile.acidity", "citric.acid", "pH")
ggpairs(wine_quality,
columns = wq.names.acid,
mapping = aes(color = quality),
lower = list(continuous = ggscatalpha),
diag = list(continuous = ggdensalpha))
wq.names.sulphur <- c("free.sulfur.dioxide", "total.sulfur.dioxide", "sulphates", "chlorides")
ggpairs(wine_quality,
columns = wq.names.sulphur,
mapping = aes(color = quality),
lower = list(continuous = ggscatalpha),
diag = list(continuous = ggdensalpha))
wq.names.alcohol <- c("alcohol", "residual.sugar", "density")
ggpairs(wine_quality,
columns = wq.names.alcohol,
mapping = aes(color = quality),
lower = list(continuous = ggscatalpha),
diag = list(continuous = ggdensalpha))
getwd()
setwd("C:/Source/Repos/DAND-P4-Explore-and-Summarize-Data/project/")
getwd()
setwd("C:/Source/Repos/DAND-P4-Explore-and-Summarize-Data/project/")
getwd()
setwd("C:/Source/Repos/DAND-P4-Explore-and-Summarize-Data/project/")
getwd()
getwd()
pairs(wine_quality)
install.packages(c("jsonlite", "stringr"))
cor(wine_quality)
View(wine_quality)
cor(wine_quality[-X])
cor(subset(wine_quality, -X)
)
cor(subset(wine_quality, select = c(-X)
)
)
cor(wine_quality[, !names(wine_quality) %in% 'X'])
cor(wine_quality[, !names(wine_quality) %in% 'x'])
cor(wine_quality[, !names(wine_quality) %in% c('x')])
cor(wine_quality[, !(names(wine_quality) %in% c('x')])
cor(wine_quality[, !(names(wine_quality) %in% c('x'))])
wq <- wine_quality[, !(names(wine_quality) %in% c("x"))]
wq
View(wq)
wq <- wine_quality[, !(names(wine_quality) %in% c("X"))]
wq <- wine_quality[, !(names(wine_quality) %in% c("X"))]
cor(wine_quality[, !(names(wine_quality) %in% c('X'))])
cor(wq)
View(wq)
wq <- wine_quality[, !(names(wine_quality) %in% c("X", "quality"))]
wq$quality <- as.numeric(levels(wine_quality$quality)[wine_quality$quality]
)
cor(wq)
wq <- wine_quality[, !(names(wine_quality) %in% c("X"))]
View(wq)
wq$quality <- as.numeric(levels(wq$quality)[wq$quality]
)
View(wq)
cor(wq)
pairs(cor(wq))
ggpairs(cor(wq))
library(GGally)
ggpairs(cor(wq))
ggpairs(data.frame(cor(wq)))
wq.cor <- cor(wq)
wq.cor
wq.cor[0]
wq.cor[1]
wq.cor[1][0]
wq.cor[1][1]
cor(wine_quality)
wq <- wine_quality
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
wq <- wine_quality
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
wq <- wine_quality
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
wq.cor
wq <- wine_quality
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
wq.cor
ggcorr(wq)
ggcorr(wine_quality)
ggcorr(wq)
wq <- wine_quality
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
wq.cor
ggcorr(wq)
ggcorr(wq, method = "complete.obs")
ggcorr(wq, nbreaks = 3)
ggcorr(wq, nbreaks = 4)
ggcorr(wq, nbreaks = 3)
ggcorr(wq)
wq <- wine_quality
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
wq.cor
ggcorr(wq, nbreaks = 3)
ggcorr(wq)
wq <- wine_quality
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
wq.cor
ggcorr(wq)
ggcorr(wq, nbreaks = 3)
wq <- wine_quality
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
data.frame(wq.cor)
ggcorr(wq)
ggcorr(wq, nbreaks = 3)
ggcorr(wq, nbreaks = 4)
3
wq <- wine_quality
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
data.frame(wq.cor)
ggcorr(wq)
ggcorr(wq, nbreaks = 3)
wq <- wine_quality[, !(names(wine_quality) %in% c("X"))]
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
data.frame(wq.cor)
ggcorr(wq)
ggcorr(wq, nbreaks = 3)
wq <- wine_quality[, !(names(wine_quality) %in% c("X"))]
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
data.frame(wq.cor)
# Using default continuous color map
ggcorr(wq, label = TRUE)
# Using default descrete color map
ggcorr(wq, nbreaks = 3, label = TRUE)
wq <- wine_quality[, !(names(wine_quality) %in% c("X"))]
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
data.frame(wq.cor)
# Using default continuous color map
ggcorr(wq, label = TRUE, hjust = 0.75)
# Using default descrete color map
ggcorr(wq, nbreaks = 3, label = TRUE)
wq <- wine_quality[, !(names(wine_quality) %in% c("X"))]
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
data.frame(wq.cor)
# Using default continuous color map
ggcorr(wq, label = TRUE, hjust = 1)
# Using default descrete color map
ggcorr(wq, nbreaks = 3, label = TRUE)
wq <- wine_quality[, !(names(wine_quality) %in% c("X"))]
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
data.frame(wq.cor)
# Using default continuous color map
ggcorr(wq, label = TRUE, hjust = 0.95)
# Using default descrete color map
ggcorr(wq, nbreaks = 3, label = TRUE)
wq <- wine_quality[, !(names(wine_quality) %in% c("X"))]
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
data.frame(wq.cor)
# Using default continuous color map
ggcorr(wq, label = TRUE, hjust = 0.9, layout.exp = 1)
# Using default descrete color map
ggcorr(wq, nbreaks = 3, label = TRUE)
wq <- wine_quality[, !(names(wine_quality) %in% c("X"))]
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
data.frame(wq.cor)
# Using default continuous color map
ggcorr(wq, label = TRUE, hjust = 0.9, layout.exp = 1.25)
# Using default descrete color map
ggcorr(wq, nbreaks = 3, label = TRUE)
wq <- wine_quality[, !(names(wine_quality) %in% c("X"))]
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
data.frame(wq.cor)
# Using default continuous color map
ggcorr(wq, label = TRUE, hjust = 0.9, layout.exp = 1.5)
# Using default descrete color map
ggcorr(wq, nbreaks = 3, label = TRUE)
wq <- wine_quality[, !(names(wine_quality) %in% c("X"))]
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
data.frame(wq.cor)
# Using default continuous color map
ggcorr(wq, label = TRUE, hjust = 0.9, layout.exp = 2)
# Using default descrete color map
ggcorr(wq, nbreaks = 3, label = TRUE)
wq <- wine_quality[, !(names(wine_quality) %in% c("X"))]
wq$quality <- as.numeric(levels(wq$quality)[wq$quality])
wq.cor <- cor(wq)
data.frame(wq.cor)
# Using default continuous color map
ggcorr(wq, label = TRUE, hjust = 0.9, layout.exp = 2)
# Using default descrete color map
ggcorr(wq, nbreaks = 3, label = TRUE, hjust = 0.9, layout.exp = 2)
install.packages("pandoc")
install.packages("rmarkdown")
knit_with_parameters('C:/Users/Mahlon/Source/Repos/DAND-P4-Explore-and-Summarize-Data/project/DAND-P4-EDA.Rmd')
